COMPILER TCDSwift

/*--------------------------------------------------------------------------*/

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  space = '\u0020'.
  singleQuote = '\''.
  doubleQuote = '\"'.
  dot = '.'.
  characters = ANY - cr - lf - singleQuote.
  ascii = ANY - cr - lf - doubleQuote.


TOKENS
  ident  = letter {letter | digit | dot}.
  number = digit {digit}.
  string = '"' {ascii} '"'.
  char   = '\'' [characters] '\''.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

/*------------------------------------------------------------------------
Operators
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

//No associativity, precedence level 160

ExponentiativeOp
= ( "<<"
  | ">>"
  ).

/*------------------------------------------------------------------------*/

//Left associative, precedence level 150

MultiplicativeOp
=
  ( "*"
  | "/"
  | "%"
  | "&*"
  | "&/"
  | "&%"
  | "&"
  ).

/*------------------------------------------------------------------------*/

//Left associative, precedence level 140

AdditiveOp
= ( "+"
  | "-"
  | "&+"
  | "&-"
  | "|"
  | "^"
  ).

/*------------------------------------------------------------------------*/

//No associativity, precedence level 135

RangeOp
= ( "..<"
  | "..."
  ).

/*------------------------------------------------------------------------*/

//No associativity, precedence level 132

CastOp
= ( "is"
  | "as"
  ).

/*------------------------------------------------------------------------*/

//No associativity, precedence level 130

ComparativeOp
=
  ( "=="
  | "<"
  | ">"
  | "<="
  | ">="
  | "!="
  | "==="
  | "!=="
  | "~="
  ).

/*------------------------------------------------------------------------*/

//Left associative, precedence level 120

ConjunctiveOp
= "&&".

/*------------------------------------------------------------------------*/

//Left associative, precedence level 110

DisjunctiveOp
= "||".

/*------------------------------------------------------------------------*/

//Right associative, precedence level 110

NilCoalescingOp
= "??".

/*------------------------------------------------------------------------*/

//Right associative, precedence level 100

TernaryOp
= "?".

/*------------------------------------------------------------------------*/

//Right associative, precedence level 90

AssignmentOps
=
  ( "="
  | "*="
  | "/="
  | "%="
  | "+="
  | "-="
  | "<<="
  | ">>="
  | "&="
  | "^="
  | "|="
  | "&&="
  | "||="
  ).

/*------------------------------------------------------------------------*/

PrefixOps
=
  ( "++"
  | "--"
  | "!"
  | "~"
  | "+"
  | "-"
  ).

/*------------------------------------------------------------------------*/

PostfixOps
= ( "++"
  | "--"
  ).

/*------------------------------------------------------------------------*/

AssignmentOp
= "=".

/*------------------------------------------------------------------------*/

ConditionalOp
= '?' Expression ':'.

/*------------------------------------------------------------------------*/

//TypeCastOp yet to be defined

/*------------------------------------------------------------------------*/

Identifier
= ident.

/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
Expressions
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

Expression
= PrefixExpression [BinaryExpressions].

/*------------------------------------------------------------------------*/

ExpressionList
=
  ( Expression
  | Expression ',' ExpressionList
  ).

/*------------------------------------------------------------------------*/

PrefixExpression
=
  ( [PrefixOps] PostfixExpression
  | InOutExpression
  ).

/*------------------------------------------------------------------------*/

InOutExpression
= "&" Identifier.

/*------------------------------------------------------------------------*/

BinaryExpression
=
  ( BinaryOp PrefixExpression
  | AssignmentOp PrefixExpression
  | ConditionalOp PrefixExpression
  /*| TypeCastOp is not defined */
  ).

/*------------------------------------------------------------------------*/

BinaryExpressions
= BinaryExpression [BinaryExpressions].

/*------------------------------------------------------------------------*/

PrimaryExpression
=
  // Identifier [GenericArgumentClause] to be defined
  ( LiteralExpression
  | SelfExpression
  | SuperclassExpression
  //| ClosureExpression to be defined
  | ParenthesizedExpression
  | ImplicitMemberExpression
  | WildcardExpression
  ).

/*------------------------------------------------------------------------*/

//GenericArgumentClause and it's sub expression yet to be defined

/*------------------------------------------------------------------------*/

LiteralExpression
=
  ( Literal
  | ( ArrayLiteral | DictionaryLiteral )
  | ( "_FILE_" | "_LINE_" | "_COLUMN_" | "_FUNCTION_" )
  ).

/*------------------------------------------------------------------------*/

ArrayLiteral = '[' [ArrayLiteralItems] ']'.

/*------------------------------------------------------------------------*/

ArrayLiteralItems
= ArrayLiteralItem
| ArrayLiteralItem ',' ArrayLiteralItems
.

/*------------------------------------------------------------------------*/

ArrayLiteralItem
= Expression.

/*------------------------------------------------------------------------*/

DictionaryLiteral
=
  ( '[' DictionaryLiteralItems ']'
  | "[:]"
  ).

/*------------------------------------------------------------------------*/

DictionaryLiteralItems
= DictionaryLiteralItem [',' DictionaryLiteralItems].

/*------------------------------------------------------------------------*/

DictionaryLiteralItem
= Expression ':' Expression.

/*------------------------------------------------------------------------*/

SelfExpression
=
  ( "self"
  | "self" '.' Identifier
  | "self" '[' Expression ']'
  | "self" '.' "init"
  ).

/*------------------------------------------------------------------------*/

SuperclassExpression
= SuperclassMethodExpression
| SuperclassSubscriptExpression
| SuperclassInitializerExpression
.

/*------------------------------------------------------------------------*/

SuperclassMethodExpression
= "super" '.' Identifier.

/*------------------------------------------------------------------------*/

SuperclassSubscriptExpression
= "super" '[' Expression ']'.

/*------------------------------------------------------------------------*/

SuperclassInitializerExpression
= "super" '.' "init".

/*------------------------------------------------------------------------*/

//ClosureExpression yet to be defined

/*------------------------------------------------------------------------*/

//ClosureSignature yet to be defined

/*------------------------------------------------------------------------*/

//CaptureList yet to be defined

/*------------------------------------------------------------------------*/

//CaptureSpecifier yet to be defined

/*------------------------------------------------------------------------*/

ImplicitMemberExpression
= '.' Identifier.

/*------------------------------------------------------------------------*/

ParenthesizedExpression
= '(' [ExpressionElementList] ')'.

/*------------------------------------------------------------------------*/

ExpressionElementList
= ExpressionElement
| ExpressionElement ',' ExpressionElementList
.

/*------------------------------------------------------------------------*/

ExpressionElement
=
  ( Expression
  | Identifier ':' Expression
  ).

/*------------------------------------------------------------------------*/

WildcardExpression
= "_".

/*------------------------------------------------------------------------*/

PostfixExpression
= PrimaryExpression
| PostfixExpression PostfixOps
| FunctionCallExpression
| InitializerExpression
| ExplicitMemberExpression
| PostfixSelfExpression
| DynamicTypeExpression
| SubscriptExpression
| ForcedValueExpression
| OptionalChainingExpression
.

/*------------------------------------------------------------------------*/

FunctionCallExpression
= PostfixExpression ParenthesizedExpression
//| PostfixExpression [ParenthesizedExpression] TrailingClosure yet to be defined
.

/*------------------------------------------------------------------------*/

//TrailingClosure to be defined

/*------------------------------------------------------------------------*/

InitializerExpression
= PostfixExpression '.' "init".

/*------------------------------------------------------------------------*/

ExplicitMemberExpression
=
  ( PostfixExpression '.' number
  //| PostfixExpression '.' Identifier [GenericArgumentClause] yet to be defined
  ).

/*------------------------------------------------------------------------*/

PostfixSelfExpression
= PostfixExpression '.' "self".

/*------------------------------------------------------------------------*/

DynamicTypeExpression
= PostfixExpression '.' "dynamicType".

/*------------------------------------------------------------------------*/

SubscriptExpression
= PostfixExpression '[' ExpressionList ']'.

/*------------------------------------------------------------------------*/

ForcedValueExpression
= PostfixExpression '!'.

/*------------------------------------------------------------------------*/

OptionalChainingExpression
= PostfixExpression '?'.

/*------------------------------------------------------------------------*/

BinaryOp
= Identifier AssignmentOps Expression
| Ternary.

/*------------------------------------------------------------------------*/

Ternary
= NilCoalescing
  [ TernaryOp Expression ":" Expression ].

/*------------------------------------------------------------------------*/

NilCoalescing
= Disjunctive
  { NilCoalescingOp Disjunctive }.

/*------------------------------------------------------------------------*/

Disjunctive
= Conjuctive
  { DisjunctiveOp Conjuctive }.

/*------------------------------------------------------------------------*/

Conjuctive
= Comparative
  { ConjunctiveOp Comparative }.

/*------------------------------------------------------------------------*/

Comparative
= Cast
  { ComparativeOp Cast }.

/*------------------------------------------------------------------------*/

Cast
= Range
  { CastOp Range }.

/*------------------------------------------------------------------------*/

Range
= Additive
  { RangeOp Additive }.

/*------------------------------------------------------------------------*/

Additive
= Multiplicative
  { AdditiveOp Multiplicative}.

/*------------------------------------------------------------------------*/

Multiplicative
= Exponentiative
  { MultiplicativeOp Exponentiative }.

/*------------------------------------------------------------------------*/

Exponentiative
= Factor
  { ExponentiativeOp Factor }.

/*------------------------------------------------------------------------*/

Factor
=
  ( Identifier
  | Literal
  | '-' Factor
  ).

/*------------------------------------------------------------------------*/

Literal
=
  ( number
  | string
  | char
  | "true"
  | "false"
  | "nil"
  ).

/*------------------------------------------------------------------------*/

TCDSwift
= "swift"
  '{'
  ExpressionList
  '}'
  .

END TCDSwift.
