COMPILER Swift

List<IRTuple> Tuples = new List<IRTuple>

/*--------------------------------------------------------------------------*/

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  space = '\u0020'.
  singleQuote = '\''.
  doubleQuote = '\"'.
  dot = '.'.
  characters = ANY - cr - lf - singleQuote.
  ascii = ANY - cr - lf - doubleQuote.


TOKENS
  ident  = letter {letter | digit | dot}.
  number = digit {digit}.
  string = '"' {ascii} '"'.
  char   = '\'' [characters] '\''.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

//Temp shit for testing
ParameterClause = .
ImportDeclaration = .
StructDeclaration = .
InitializerDeclaration = .
DeinitializerDeclaration = .
RawValueStyleEnum = .
GenericParameterClause = .
UnionStyleEnumCaseClause = .
WillSetDidSetBlock = .
DeclarationModifiers = .
Operator = .
ParamterClause = .
WildCardPattern = .
ValueBindingPattern = .
TuplePattern = .
EnumCasePattern = .
TypeCastingPattern = .
ExpressionPattern = .

/*------------------------------------------------------------------------
Types
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

Type
= ArrayType
| DictionaryType
| FunctionType
| TypeIdentifier
| TupleType
| OptionalType
| ImplicitlyUnwrappedOptionalType
| ProtocolCompositionType
| MetatypeType
.

/*------------------------------------------------------------------------*/

TypeAnnotation
= [Attributes] Type.

/*------------------------------------------------------------------------*/

TypeIdentifier
= TypeName [GenericArgumentClause]
| TypeName [GenericArgumentClause] '.' TypeIdentifier
.

/*------------------------------------------------------------------------*/

TypeName
= Identifier.

/*------------------------------------------------------------------------*/

TupleType
= '(' [TupleTypeBody] ')'.

/*------------------------------------------------------------------------*/

TupleTypeBody
= TupleTypeElementList ["..."].

/*------------------------------------------------------------------------*/

TupleTypeElementList
= TupleTypeElement
| TupleTypeElement ',' TupleTypeElementList
.

/*------------------------------------------------------------------------*/

TupleTypeElement
= [Attributes] ["inout"] Type
| ["inout"] ElementName TypeAnnotation
.

/*------------------------------------------------------------------------*/

ElementName
= Identifier.

/*------------------------------------------------------------------------*/

FunctionType
= Type "->" Type.

/*------------------------------------------------------------------------*/

ArrayType
= '[' Type ']'.

/*------------------------------------------------------------------------*/

DictionaryType
= '[' Type ':' Type ']'.

/*------------------------------------------------------------------------*/

OptionalType
= Type '?'.

/*------------------------------------------------------------------------*/

ImplicitlyUnwrappedOptionalType
= Type '!'.

/*------------------------------------------------------------------------*/

ProtocolCompositionType
= "protocol" '<' [ProtocolIdentifierList] '>'.

/*------------------------------------------------------------------------*/

ProtocolIdentifierList
= ProtocolIdentifier
| ProtocolIdentifier ',' ProtocolIdentifierList
.

/*------------------------------------------------------------------------*/

ProtocolIdentifier
= TypeIdentifier.

/*------------------------------------------------------------------------*/

MetatypeType
= Type '.' "Type"
| Type '.' "Protocol"
.

/*------------------------------------------------------------------------*/

TypeInheritcanceClause
= ':' ClassRequirement ',' TypeInheritanceList
| ':' ClassRequirement
| ':' TypeInheritanceList
.

/*------------------------------------------------------------------------*/

TypeInheritanceList
= TypeIdentifier
| TypeIdentifier ',' TypeInheritanceList
.

/*------------------------------------------------------------------------*/

ClassRequirement
= "class".

/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
Operators
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

//No associativity, precedence level 160

ExponentiativeOp
= ( "<<"
  | ">>"
  ).

/*------------------------------------------------------------------------*/

//Left associative, precedence level 150

MultiplicativeOp
=
  ( "*"
  | "/"
  | "%"
  | "&*"
  | "&/"
  | "&%"
  | "&"
  ).

/*------------------------------------------------------------------------*/

//Left associative, precedence level 140

AdditiveOp
= ( "+"
  | "-"
  | "&+"
  | "&-"
  | "|"
  | "^"
  ).

/*------------------------------------------------------------------------*/

//No associativity, precedence level 135

RangeOp
= ( "..<"
  | "..."
  ).

/*------------------------------------------------------------------------*/

//No associativity, precedence level 132

CastOp
= ( "is"
  | "as"
  ).

/*------------------------------------------------------------------------*/

//No associativity, precedence level 130

ComparativeOp
=
  ( "=="
  | "<"
  | ">"
  | "<="
  | ">="
  | "!="
  | "==="
  | "!=="
  | "~="
  ).

/*------------------------------------------------------------------------*/

//Left associative, precedence level 120

ConjunctiveOp
= "&&".

/*------------------------------------------------------------------------*/

//Left associative, precedence level 110

DisjunctiveOp
= "||".

/*------------------------------------------------------------------------*/

//Right associative, precedence level 110

NilCoalescingOp
= "??".

/*------------------------------------------------------------------------*/

//Right associative, precedence level 100

TernaryOp
= "?".

/*------------------------------------------------------------------------*/

//Right associative, precedence level 90

AssignmentOps
=
  ( "="
  | "*="
  | "/="
  | "%="
  | "+="
  | "-="
  | "<<="
  | ">>="
  | "&="
  | "^="
  | "|="
  | "&&="
  | "||="
  ).

/*------------------------------------------------------------------------*/

PrefixOps
=
  ( "++"
  | "--"
  | "!"
  | "~"
  | "+"
  | "-"
  ).

/*------------------------------------------------------------------------*/

PostfixOps
= ( "++"
  | "--"
  ).

/*------------------------------------------------------------------------*/

AssignmentOp
= "=".

/*------------------------------------------------------------------------*/

ConditionalOp
= '?' Expression ':'.

/*------------------------------------------------------------------------*/

TypeCastOp
=
  ( "is" Type
  | "as" Type
  | "as" '?' Type
  ).

/*------------------------------------------------------------------------*/

Identifier
= ident.

/*------------------------------------------------------------------------*/

IdentifierList
= Identifier
| Identifier ',' IdentifierList
.

/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
Expressions
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

Expression
= PrefixExpression [BinaryExpressions].

/*------------------------------------------------------------------------*/

ExpressionList
=
  ( Expression
  | Expression ',' ExpressionList
  ).

/*------------------------------------------------------------------------*/

PrefixExpression
=
  ( [PrefixOps] PostfixExpression
  | InOutExpression
  ).

/*------------------------------------------------------------------------*/

InOutExpression
= "&" Identifier.

/*------------------------------------------------------------------------*/

BinaryExpression
=
  ( BinaryOp PrefixExpression
  | AssignmentOp PrefixExpression
  | ConditionalOp PrefixExpression
  | TypeCastOp
  ).

/*------------------------------------------------------------------------*/

BinaryExpressions
= BinaryExpression [BinaryExpressions].

/*------------------------------------------------------------------------*/

PrimaryExpression
=
  ( Identifier [GenericArgumentClause]
  | LiteralExpression
  | SelfExpression
  | SuperclassExpression
  | ClosureExpression
  | ParenthesizedExpression
  | ImplicitMemberExpression
  | WildcardExpression
  ).

/*------------------------------------------------------------------------*/

GenericArgumentClause
= '<' GenericArgumentList '>'.

/*------------------------------------------------------------------------*/

GenericArgumentList
= ( GenericArgument
  | GenericArgument ',' GenericArgumentList
  ).

/*------------------------------------------------------------------------*/

GenericArgument
= Type.

/*------------------------------------------------------------------------*/

LiteralExpression
=
  ( Literal
  | ( ArrayLiteral | DictionaryLiteral )
  | ( "_FILE_" | "_LINE_" | "_COLUMN_" | "_FUNCTION_" )
  ).

/*------------------------------------------------------------------------*/

ArrayLiteral = '[' [ArrayLiteralItems] ']'.

/*------------------------------------------------------------------------*/

ArrayLiteralItems
= ArrayLiteralItem
| ArrayLiteralItem ',' ArrayLiteralItems
.

/*------------------------------------------------------------------------*/

ArrayLiteralItem
= Expression.

/*------------------------------------------------------------------------*/

DictionaryLiteral
=
  ( '[' DictionaryLiteralItems ']'
  | "[:]"
  ).

/*------------------------------------------------------------------------*/

DictionaryLiteralItems
= DictionaryLiteralItem [',' DictionaryLiteralItems].

/*------------------------------------------------------------------------*/

DictionaryLiteralItem
= Expression ':' Expression.

/*------------------------------------------------------------------------*/

SelfExpression
=
  ( "self"
  | "self" '.' Identifier
  | "self" '[' Expression ']'
  | "self" '.' "init"
  ).

/*------------------------------------------------------------------------*/

SuperclassExpression
= SuperclassMethodExpression
| SuperclassSubscriptExpression
| SuperclassInitializerExpression
.

/*------------------------------------------------------------------------*/

SuperclassMethodExpression
= "super" '.' Identifier.

/*------------------------------------------------------------------------*/

SuperclassSubscriptExpression
= "super" '[' Expression ']'.

/*------------------------------------------------------------------------*/

SuperclassInitializerExpression
= "super" '.' "init".

/*------------------------------------------------------------------------*/

ClosureExpression
= '{' [ClosureSignature] Statements '}'.

/*------------------------------------------------------------------------*/

ClosureSignature
= ParameterClause [FunctionResult] "in"
| IdentifierList [FunctionResult] "in"
| CaptureList ParameterClause [FunctionResult] "in"
| CaptureList IdentifierList [FunctionResult] "in"
| CaptureList "in"
.

/*------------------------------------------------------------------------*/

CaptureList
= '[' CaptureSpecifier Expression ']'.

/*------------------------------------------------------------------------*/

CaptureSpecifier
=
  ( "weak"
  | "unowned"
  | "unowned(safe)"
  | "unowned(unsafe)"
  ).

/*------------------------------------------------------------------------*/

ImplicitMemberExpression
= '.' Identifier.

/*------------------------------------------------------------------------*/

ParenthesizedExpression
= '(' [ExpressionElementList] ')'.

/*------------------------------------------------------------------------*/

ExpressionElementList
= ExpressionElement
| ExpressionElement ',' ExpressionElementList
.

/*------------------------------------------------------------------------*/

ExpressionElement
=
  ( Expression
  | Identifier ':' Expression
  ).

/*------------------------------------------------------------------------*/

WildcardExpression
= "_".

/*------------------------------------------------------------------------*/

PostfixExpression
= PrimaryExpression
| PostfixExpression PostfixOps
| FunctionCallExpression
| InitializerExpression
| ExplicitMemberExpression
| PostfixSelfExpression
| DynamicTypeExpression
| SubscriptExpression
| ForcedValueExpression
| OptionalChainingExpression
.

/*------------------------------------------------------------------------*/

FunctionCallExpression
= PostfixExpression ParenthesizedExpression
| PostfixExpression [ParenthesizedExpression] TrailingClosure
.

/*------------------------------------------------------------------------*/

TrailingClosure
= ClosureExpression.

/*------------------------------------------------------------------------*/

InitializerExpression
= PostfixExpression '.' "init".

/*------------------------------------------------------------------------*/

ExplicitMemberExpression
=
  ( PostfixExpression '.' number
  | PostfixExpression '.' Identifier [GenericArgumentClause]
  ).

/*------------------------------------------------------------------------*/

PostfixSelfExpression
= PostfixExpression '.' "self".

/*------------------------------------------------------------------------*/

DynamicTypeExpression
= PostfixExpression '.' "dynamicType".

/*------------------------------------------------------------------------*/

SubscriptExpression
= PostfixExpression '[' ExpressionList ']'.

/*------------------------------------------------------------------------*/

ForcedValueExpression
= PostfixExpression '!'.

/*------------------------------------------------------------------------*/

OptionalChainingExpression
= PostfixExpression '?'.

/*------------------------------------------------------------------------*/

BinaryOp
= Identifier AssignmentOps Expression
| Ternary.

/*------------------------------------------------------------------------*/

Ternary
= NilCoalescing
  [ TernaryOp Expression ":" Expression ].

/*------------------------------------------------------------------------*/

NilCoalescing
= Disjunctive
  { NilCoalescingOp Disjunctive }.

/*------------------------------------------------------------------------*/

Disjunctive
= Conjuctive
  { DisjunctiveOp Conjuctive }.

/*------------------------------------------------------------------------*/

Conjuctive
= Comparative
  { ConjunctiveOp Comparative }.

/*------------------------------------------------------------------------*/

Comparative
= Cast
  { ComparativeOp Cast }.

/*------------------------------------------------------------------------*/

Cast
= Range
  { CastOp Range }.

/*------------------------------------------------------------------------*/

Range
= Additive
  { RangeOp Additive }.

/*------------------------------------------------------------------------*/

Additive
= Multiplicative
  { AdditiveOp Multiplicative}.

/*------------------------------------------------------------------------*/

Multiplicative
= Exponentiative
  { MultiplicativeOp Exponentiative }.

/*------------------------------------------------------------------------*/

Exponentiative
= Factor
  { ExponentiativeOp Factor }.

/*------------------------------------------------------------------------*/

Factor
=
  ( Identifier
  | Literal
  | '-' Factor
  ).

/*------------------------------------------------------------------------*/

Literal
=
  ( number
  | string
  | char
  | "true"
  | "false"
  | "nil"
  ).

/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
Statements
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

Statement
= Expression ';'
| LoopStatement ';'
| BranchStatement ';'
| LabeledStatement ';'
| ControlTransferStatement ';'
.

/*------------------------------------------------------------------------*/

Statements
= Statement [Statements].

/*------------------------------------------------------------------------*/

LoopStatement
= ForStatement
| ForInStatement
| WhileStatement
| DoWhileStatement
.

/*------------------------------------------------------------------------*/

ForStatement
= "for"
  [ForInit] ';'
  [Expression] ';'
  [Expression]
  CodeBlock

| "for"
  '('
  [ForInit] ';'
  [Expression] ';'
  [Expression]
  ')'
  CodeBlock
.

ForInit
= VariableDeclaration
| ExpressionList
.

/*------------------------------------------------------------------------*/

ForInStatement
= "for" Pattern "in" Expression CodeBlock.

/*------------------------------------------------------------------------*/

WhileStatement
= "while"
  WhileCondition
  CodeBlock.

WhileCondition
= Expression
| Declaration
.

/*------------------------------------------------------------------------*/

DoWhileStatement
= "do"
  CodeBlock
  "while"
  WhileCondition.

/*------------------------------------------------------------------------*/

BranchStatement
= IfStatement
| SwitchStatement
.

/*------------------------------------------------------------------------*/

IfStatement
= "if"
  IfCondition
  CodeBlock
  [ElseClause]
.

IfCondition
= Expression
| Declaration
.

ElseClause
= "else" CodeBlock
| "else" IfStatement
.

/*------------------------------------------------------------------------*/

SwitchStatement
= "switch"
  Expression
  '{'
  [SwitchCases]
  '}'
.

SwitchCases
= SwitchCase [SwitchCases].

SwitchCase
=
  ( CaseLabel
    Statement
  | DefaultLabel
    Statements
  )
| ( CaseLabel ';'
  | DefaultLabel ';'
  )
.

CaseLabel
= "case" CaseItemList ':'.

CaseItemList
= Pattern [GuardClause]
| Pattern [GuardClause] ',' CaseItemList
.

DefaultLabel
= "default" ':'.

GuardClause
= "where" GuardExpression.

GuardExpression
= Expression.

/*------------------------------------------------------------------------*/

LabeledStatement
= StatementLabel LoopStatement
| StatementLabel SwitchStatement
.

StatementLabel
= LabelName ':'.

LabelName
= Identifier.

/*------------------------------------------------------------------------*/

ControlTransferStatement
= BreakStatement
| ContinueStatement
| FallthroughStatement
| ReturnStatement
.

/*------------------------------------------------------------------------*/

BreakStatement
= "break" [LabelName].

/*------------------------------------------------------------------------*/

ContinueStatement
= "continue" [LabelName].

/*------------------------------------------------------------------------*/

FallthroughStatement
= "fallthrough".

/*------------------------------------------------------------------------*/

ReturnStatement
= "return" [Expression].

/*------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
Declarations
------------------------------------------------------------------------*/

/*------------------------------------------------------------------------*/

Attribute
= '@'
  AttributeName
  [AttributeArgumentClause]
  .

/*------------------------------------------------------------------------*/

Attributes
= Attribute
  [Attributes]
  .

/*------------------------------------------------------------------------*/

AttributeName
=  Identifier
  .

/*------------------------------------------------------------------------*/

AttributeArgumentClause
= '('
  [BalancedTokens]
  ')'
  .

/*------------------------------------------------------------------------*/

BalancedToken
=
  ( '('
    [BalancedTokens]
    ')'
  | '['
    [BalancedTokens]
    ']'
  | '{'
    [BalancedTokens]
    '}'
    // “Any identifier, keyword, literal, or operator”
    // “Any punctuation except (, ), [, ], {, or }”
  )
  .

/*------------------------------------------------------------------------*/

BalancedTokens
= BalancedToken
  [BalancedTokens]
  .

/*------------------------------------------------------------------------*/

CodeBlock
= '{'
  [Statements]
  '}'
  .

/*------------------------------------------------------------------------*/

ConstantDeclaration
= [Attributes]
  [DeclarationSpecifiers]
  "let"
  PatternInitializerList
  .

/*------------------------------------------------------------------------*/

Declaration
= ( ImportDeclaration
  | ConstantDeclaration
  | VariableDeclaration
  | FunctionDeclaration
  | EnumDeclaration
  | StructDeclaration
  | InitializerDeclaration
  | DeinitializerDeclaration
  )
  .

/*------------------------------------------------------------------------*/

DeclarationSpecifier
= ( "class"
  | "mutating"
  | "nonmutating"
  | "override"
  | "static"
  | "unowned"
  | "unowned(safe)"
  | "unowned(unsafe)"
  | "weak"
  )
  .

/*------------------------------------------------------------------------*/

DeclarationSpecifiers
= DeclarationSpecifier
  [DeclarationSpecifiers]
  .

/*------------------------------------------------------------------------*/

EnumDeclaration
= [Attributes]
  ( UnionStyleEnum
  | RawValueStyleEnum
  )
  .

/*------------------------------------------------------------------------*/

EnumName
= Identifier
  .

/*------------------------------------------------------------------------*/

EnumCaseName
= Identifier
  .

/*------------------------------------------------------------------------*/

UnionStyleEnum
= EnumName
  [GenericParameterClause]
  '{'
  [UnionStyleEnumMembers]
  '}'
  .

/*------------------------------------------------------------------------*/

UnionStyleEnumMembers
= UnionStyleEnumMember
  [UnionStyleEnumMembers]
  .

/*------------------------------------------------------------------------*/

UnionStyleEnumMember
= ( Declaration
  | UnionStyleEnumCaseClause
  )
  .

/*------------------------------------------------------------------------*/

  VariableDeclaration
  = VariableDeclarationHead
    ( PatternInitializerList
    | VariableName TypeAnnotation
    )
    ( CodeBlock
    | [Initializer] WillSetDidSetBlock
    )
    .

/*------------------------------------------------------------------------*/

VariableDeclarationHead
= [Attributes]
  [DeclarationModifiers]
  "var"
  .

/*------------------------------------------------------------------------*/

VariableName
= Identifier
  .

/*------------------------------------------------------------------------*/

FunctionDeclaration
= FunctionHead
  FunctionName
  [GenericParameterClause]
  FunctionSignature
  FunctionBody
  .

/*------------------------------------------------------------------------*/

FunctionHead
= [Attributes]
  [DeclarationSpecifiers]
  "func"
  .

/*------------------------------------------------------------------------*/

FunctionName
= ( Identifier
  | Operator
  )
  .

/*------------------------------------------------------------------------*/

FunctionSignature
= ParamterClause
  [FunctionResult]
  .

/*------------------------------------------------------------------------*/

FunctionResult
= [Attributes]
  Type
  .

/*------------------------------------------------------------------------*/

FunctionBody
= CodeBlock
  .

/*------------------------------------------------------------------------*/

Initializer
= '='
  Expression
  .

/*------------------------------------------------------------------------*/

Pattern
= ( WildCardPattern [TypeAnnotation]
  | IdentifierPattern [TypeAnnotation]
  | ValueBindingPattern
  | TuplePattern [TypeAnnotation]
  | EnumCasePattern
  | TypeCastingPattern
  | ExpressionPattern
  )
  .

/*------------------------------------------------------------------------*/

IdentifierPattern
= Identifier
  .

/*------------------------------------------------------------------------*/

PatternInitializer
= Pattern
  [Initializer]
  .

/*------------------------------------------------------------------------*/

PatternInitializerList
= PatternInitializer
  [',' PatternInitializerList]
  .

/*------------------------------------------------------------------------*/

Swift
= Statements
  .

END Swift.
